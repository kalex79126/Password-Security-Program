# python program that applies account policies 
# the program checks for password complexity, password history
# has the feature of MFA, salting process, hashing, and encrpytion, account lockout settings 

import re, json

def password_strength(password):
    # Define a list of conditions to check
    conditions = [
        (len(password) >= 8, "length"),
        (re.search(r"\d", password), "digit"),
        (re.search(r"[a-z]", password), "lowercase letter"),
        (re.search(r"[A-Z]", password), "uppercase letter"),
        (re.search(r"[!@#$%^&*()_+-=]", password), "special character")
    ]
# add if 3 numbers are in sequence 



    # Initialize the strength score
    score = sum(1 for condition, _ in conditions if condition)

    # Provide feedback on specific weaknesses
    weaknesses = [desc for condition, desc in conditions if not condition]
    if weaknesses:
        print(f"Your password is weak in the following aspects: {', '.join(weaknesses)}.")

    if score == 5:
        print("Your password is very strong.")
    elif score >= 3:
        print("Your password is strong.")
    elif score >= 2:
        print("Your password is medium.")
    else:
        print("Your password is weak.")


# ask the user to enter a password
password = input("Enter a password: ")

# call the function and get the score
score = password_strength(password)

# print the result based on the score
if score == 5:
    print("Your password is very strong.")
elif score >= 3:
    print("Your password is strong.")
elif score >= 2:
    print("Your password is medium.")
else:
    print("Your password is weak.")

# a user has to enter TOTP generated by the program that is valid for 180 seconds

# hashes the password to check the integrity 

# adds salt before encrpyting the password to slow down the brute force process

# encrypts the password using AES for confidentiality

# account locked after 5 failed login attempt


# update password if expired
# new password cannot be same as last 3 password is history 

data = {
    "president": {
        "name": "Zaphod Beeblebrox",
        "species": "Betelgeusian"
    }
}

with open("data_file.json", "w") as json_file:
    json.dump(data, json_file)
    password_data = json.dumps(data)
